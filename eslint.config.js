import { globalIgnores } from "eslint/config";
import eslint from "@eslint/js";
import jsxA11y from "eslint-plugin-jsx-a11y";
import reactPlugin from "eslint-plugin-react";
import tseslint from "typescript-eslint";
import reactHooks from "eslint-plugin-react-hooks";
import testingLibrary from "eslint-plugin-testing-library";
import checkFile from "eslint-plugin-check-file";
export default [
  globalIgnores(["build/**/*"]),
  {
    ...eslint.configs.recommended,
  },
  ...tseslint.config(
    {
      files: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"],
      settings: {
        react: { version: "detect" },
      },
      languageOptions: {
        ecmaVersion: "latest",
        sourceType: "module",
        parserOptions: {
          projectService: true,
          tsconfigRootDir: import.meta.dirname,
        },
      },
      extends: [
        eslint.configs.recommended,
        ...tseslint.configs.recommended,
        reactPlugin.configs.flat?.recommended,
        jsxA11y.flatConfigs.recommended,
        reactHooks.configs["recommended-latest"],
        testingLibrary.configs["flat/react"],
      ],

      rules: {
        "react/react-in-jsx-scope": "off",
        "array-callback-return": ["error", { allowImplicit: true }],
        "no-await-in-loop": "error",
        "no-constant-binary-expression": "error",
        "no-constructor-return": "error",
        "no-duplicate-imports": "off",
        "no-new-native-nonconstructor": "error",
        "no-promise-executor-return": "error",
        "no-self-compare": "error",
        "no-template-curly-in-string": "error",
        "no-unmodified-loop-condition": "error",
        "no-unreachable-loop": "error",
        "no-unused-private-class-members": "error",
        "no-use-before-define": "off",
        "require-atomic-updates": "error",
        "arrow-body-style": ["error", "as-needed"],
        "block-scoped-var": "error",
        camelcase: [
          "error",
          { properties: "never", ignoreDestructuring: false },
        ],
        "consistent-return": "off",
        "consistent-this": "error",
        "dot-notation": ["error", { allowKeywords: true }],
        eqeqeq: "error",
        "guard-for-in": "error",
        "init-declarations": "error",
        "logical-assignment-operators": "error",
        "new-cap": "error",
        "no-alert": "warn",
        "no-array-constructor": "error",
        "no-bitwise": "warn",
        "no-caller": "error",
        "no-console": "warn",
        "no-div-regex": "error",
        "no-else-return": "error",
        "no-empty-static-block": "error",
        "no-eq-null": "error",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-implicit-coercion": ["error", { allow: ["!!"] }],
        "no-implicit-globals": "error",
        "no-implied-eval": "error",
        "no-invalid-this": "off",
        "no-iterator": "error",
        "no-label-var": "error",
        "no-labels": "error",
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-loop-func": "off",
        "no-multi-assign": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-object-constructor": "error",
        "no-param-reassign": "error",
        "no-proto": "error",
        "no-return-assign": "error",
        "no-script-url": "error",
        "no-sequences": "error",
        "no-shadow": "off",
        "no-throw-literal": "error",
        "no-unneeded-ternary": "error",
        "no-unused-expressions": "error",
        "no-useless-call": "error",
        "no-useless-computed-key": "error",
        "no-useless-concat": "error",
        "no-useless-constructor": "error",
        "no-useless-rename": "error",
        "no-useless-return": "error",
        "no-var": "error",
        "no-void": "error",
        "no-with": "error",
        "object-shorthand": "error",
        "prefer-arrow-callback": "error",
        "prefer-const": "error",
        "prefer-exponentiation-operator": "error",
        "prefer-numeric-literals": "error",
        "prefer-promise-reject-errors": "error",
        "prefer-regex-literals": "error",
        "prefer-template": "error",
        radix: "error",
        "require-await": "error",
        "require-yield": "error",
        yoda: "error",
        "@typescript-eslint/consistent-return": "error",
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/consistent-type-imports": "error",
        "@typescript-eslint/default-param-last": "error",
        "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/no-confusing-void-expression": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-invalid-this": "error",
        "@typescript-eslint/no-loop-func": "error",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/no-useless-empty-export": "error",
        "@typescript-eslint/no-var-requires": "error",
      },
    },
    {
      files: ["**/*.js"],
      extends: [tseslint.configs.disableTypeChecked],
    },
  ),

  {
    files: ["src/**/*.*"],
    plugins: {
      "check-file": checkFile,
    },
    rules: {
      "check-file/no-index": "off", // we don't want to use this rule for now
      "check-file/filename-naming-convention": [
        "error",
        { "**/*.{jsx,tsx,ts,js}": "KEBAB_CASE" },
        { ignoreMiddleExtensions: true },
      ],
      "check-file/folder-naming-convention": [
        "error",
        { "src/**/": "KEBAB_CASE" },
      ],
    },
    ignores: ["**/*.css", "**/*.svg"],
  },
];
